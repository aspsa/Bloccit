<!--
    Checkpoint #40 - Topics and Posts
    The Topics controller file was created by executing the following statement
    in the IRB:
         'rails g controller topics index new show edit'
<h1>Topics#show</h1>
<p>Find me in app/views/topics/show.html.erb</p>
-->
<h1><%= @topic.name %></h1>

<% if policy(@topic).update? %>
    <%= link_to "Edit Topic", edit_topic_path, class: 'btn btn-success' %>
<% end %>

<div class="row">
    <div class="col-md-8">
        <p class="lead"><%= @topic.description %></p>
        <!--
            Checkpoint #58 - Public Profiles
            
            Make sure to modify the reference to @topic, changing it to post.topic, so the partial can be included in pages that don't have a @topic variable.
            
            Render it from topics#show, using Rails's collection rendering shortcut.
            
        % @posts.each do |post| %>
            <!--
                Checkpoint #58 - Public Profiles

                Our profile pages would look better with a list of formatted links to posts, rather than displaying post titles. This is identical to what we do on the topics#show page, so rather than repeat that HTML, let's move that code into a partial that can be rendered from both pages.

                In the topics#show view, cut everything within the @posts.each block and paste it into a new app/views/posts/_post.html.erb partial.

            <div class="media">
                <!--
                    Checkpoint #53 - Voting
                    
                    The 'app/views/topics/show.html.erb' view should render the voter partial as well. Users may appreciate being able to vote on posts without drilling all the way to the actual post view. Open 'app/views/topics/show.html.erb' and add the render call.
                    
                    Because our voter partial is DRY and modular, no other change is needed. Check out this new view in localhost.
                
                %= render partial: 'votes/voter', locals: { post: post } %>
                <div class="media-body">
                    <h4 class="media-heading">
                        <!--
                            Checkpoint #40 - Topics and Posts
                            
                            Looking at our 'rake routes' output, how do you
                            think this path helper needs to change? If you
                            guessed '&lt;= link_to post.title,
                            topic_post_path(@topic, post) %&gt;' you're
                            correct. But we'll actually see sometihng more
                            idiomatic and similar to our previous
                            'lt;%= link_to post.title, post %gt;'.
                            &lt;%= link_to post.title, post %&gt;
                        -->
                        <!--
                            Checkpoint #40 - Topics and Posts
                            
                            Remember, even though you didn't explicitly
                            declare 'topic_post_path', Rails extracts it
                            from the '@topic' and 'post' in this example.
                            This is yet another example of Rails
                            conventions. If this "Rails magic" still
                            doesn't make sense, please consult with your
                            mentor.
                        -->
                        <!--
                            Checkpoint #43 - Post Markdown
                            
                        &lt;%= link_to post.title, [@topic, post] %&gt;
                        
                        %= link_to (markdown_to_html post.title), [@topic, post] %>
                    </h4>
                    
                    <!--
                        Checkpoint #44 - Uploading Images
                        
                        Let's make a similar change to topics#show as was done
                        with posts#show, so that each related post is associated
                        with its user's image.

                    <small>
                        submitted &lt;%= time_ago_in_words(post.created_at) %&gt; ago by &lt;%= post.user.name %&gt;<br />
                    </small>
                    
                    <small>
                        %= image_tag(post.user.avatar.tiny.url) if post.user.avatar? %>
                        submitted %= time_ago_in_words(post.created_at) %> ago by
                        %= post.user.name %><br />
                        %= post.comments.count %> Comments
                    </small>
                </div>
            </div>
            
        % end %>
        -->
        <%= render @posts %>
        
        <!--
            Checkpoint #45 - Pagination
            
            Make the change to the topics#show view that will paginate its list
            of posts. Review your changes on localhost. 'will_paginate' will
            continue to make new pages for every ten topics / posts created.
        -->
        <%= will_paginate @posts %>
    </div>
    <div class="col-md-4">
        <% if policy(Post.new).create? %>
            <!--
                Checkpoint #40 - Topics and Posts
                
                In 'app/views/topics/show.html.erb', we linked to
                'new_post_path(@post)'. As our 'rake routes' output shows, this
                helper is no longer available. (In fact, if you vist a topic's
                'show' page, you'll see a 'NoMethodError' pointing to this fact).
                Instead, we need to reference the 'new_topic_post'.
                
                &lt;%= link_to "New Post", new_post_path(@topic), class: "btn btn-success' %&gt;
            -->
            <%= link_to "New Post", new_topic_post_path(@topic), class: 'btn btn-success' %>
        <% end %>

        <!--
            Checkpoint #51 - Destroy
            
            Now that we have a destroy method in our controller, let's update
            the 'topics#show' view to provide a UI to delete a topic.
        -->
        <% if policy(@topic).destroy? %>
            <%= link_to "Delete Topic", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>
        <% end %>
   </div>
</div>